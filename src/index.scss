/*
 * ONLY BASE PROJECT STYLES SHOULD GO IN HERE
 * e.g. basic font setup, links etc.
 *
 * All other styles should go into individual component subfolders,
 * and be included via an import statement from the component.
 *
 * The variables and mixins files should be included from every .scss file that
 * has a dependency upon them, as load order beyond this base style
 * file *cannot be guaranteed*. The variables and mixins files must not
 * generate any actual CSS, so that this repetition is harmless.
 *
 * Utilities like clearfix should be included in this base file.
 */

// fonts
@mixin font-face($fontname, $filename: $fontname, $weight: normal, $style: normal) {
    @font-face {
        font-family: $fontname;
        src:url('/assets/fonts/#{$filename}.eot');
        src:url('/assets/fonts/#{$filename}.eot?#iefix') format('embedded-opentype'),
            url('/assets/fonts/#{$filename}.woff2') format('woff2'),
            url('/assets/fonts/#{$filename}.woff') format('woff'),
            url('/assets/fonts/#{$filename}.ttf') format('truetype');
        font-weight: $weight;
        font-style: $style;
    }
}
@include font-face('merriweather', 'merriweather-700', 700);
@include font-face('merriweather', 'merriweather-900', 900);
@include font-face('fira-sans', 'fira-sans-regular');
@include font-face('fira-sans', 'fira-sans-italic', normal, italic);
@include font-face('fira-sans', 'fira-sans-500', 500);
@include font-face('fira-sans', 'fira-sans-700', 700);

@font-face {
    font-family: icomoon;
    src:url('/assets/fonts/icomoon.eot');
    src:url('/assets/fonts/icomoon.eot?#iefix') format('embedded-opentype'),
        url('/assets/fonts/icomoon.woff') format('woff'),
        url('/assets/fonts/icomoon.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}
[class^="icon-"], [class*=" icon-"] {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@import 'variables';
// Do NOT include further imports unless the base styles have a direct dependency

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

body {
  color: $text-color;
  background-color: $background-color;
  padding: 0;
  margin: 0;
  font-family: $font-family-base;
  font-size: $font-size-base;
  line-height: $line-height-base;
}

h2,
h3 {
  font-family: $font-family-headers;
  line-height: 1.3;
  margin-top: 30px;
  margin-bottom: 30px;
}

h2 {
  font-weight: 900;
  font-size: 34px;

  @media #{$desktop-and-above} {
    font-size: 48px;
  }
}

h3 {
  font-weight: 700;
  font-size: 26px;

  @media #{$desktop-and-above} {
    font-size: 32px;
  }
}

h4, h5, h6 {
  line-height: 1.2;
  font-weight: 500;
  margin-top: 15px;
  margin-bottom: 15px;
}

h4 {
  font-size: 24px;
}

h5 {
  font-size: 18px;
}

h6 {
  font-size: 16px;
}

a {
  color: $link-color;
  display: inline-block;
  position: relative;

  &:hover,
  &:focus,
  &:active {
    color: $link-color-hover;
  }

  &[href*="//"] {
    padding-right: 0.6em;

    &::after {
      font-family: 'icomoon' !important;
      content: $icon-external-link;
      display: inline-block;
      font-size: 0.6em;
      position: relative;
      width: 0.6em;
      right: -0.6em;
      top: -0.05em;
    }
  }
}

ul {
  padding-left: 30px;
  list-style: none;

  li {
    position: relative;

    &::before {
      content: "â€”";
      position: absolute;
      left: -20px;
    }
  }

  p + & {
    margin-top: -10px; // tighten up spacing between to 6px
  }
}

ol {
  padding-left: 30px;
}

textarea {
  resize: vertical;
}

::selection {
  text-shadow: none;
  background: $accent-color;
}

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}


// FORM ELEMENTS

button,
.button {
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  color: $link-color;
  border: 2px solid $link-color;
  padding: 6px 20px;
  border-radius: $default-border-radius;
  min-width: 180px;
  font-weight: 500;
  text-align: center;

  &:hover,
  &:focus {
    color: $link-color-hover;
    border-color: $link-color-hover;
  }

  &:active {
    color: #fff;
    background-color: $link-color-hover;
    border-color: $link-color-hover;
  }

  &[href*="//"] {
    padding-right: 20px;

    &::after {
      position: static;
      margin-left: 0.6em;
      width: auto;
    }
  }
}

label {
  @extend h5;
}

input {
  display: inline-block;
  margin-top: 20px;
  margin-bottom: 30px;
  border: 2px solid transparent;
  border-radius: 5px;
  padding: 10px 20px;
  position: relative;
  left: -2px;

  &:invalid {
    box-shadow: none;

    &:not(:focus) {
      border: 2px solid $error-color;
    }
  }
}


// HELPER CLASSES from HTML5 Boilerplate

// Hide visually and from screen readers
.hidden {
  display: none !important;
}

// Hide only visually, but have it available for screen readers
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Extends the .visuallyhidden class to allow the element to be focusable
// https://www.drupal.org/node/897638
.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

// Hide visually and from screen readers, but maintain layout
.invisible {
  visibility: hidden;
}

// Clearfix
.clearfix:before,
.clearfix:after {
  content: " ";
  display: table;
}
.clearfix:after {
  clear: both;
}
